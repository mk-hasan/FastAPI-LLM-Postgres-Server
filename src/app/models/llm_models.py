from pydantic import BaseModel, Field, HttpUrl
from datetime import datetime
from typing import List, Optional, Union

class PromptRequest(BaseModel):
    """
    Request model for LLM prompt generation.
    """
    prompt: str = Field(..., min_length=1, max_length=2000,
                        description="The text prompt to send to the LLM.")
    llm_provider: str = Field("gemini", description="The LLM provider to use (e.g., 'openai', 'cohere', 'huggingface').")
    max_tokens: int = Field(150, gt=0, description="The maximum number of tokens to generate.")
    temperature: float = Field(0.7, ge=0.0, le=1.0, description="Sampling temperature for text generation.")

class LLMResponse(BaseModel):
    """
    Response model for LLM generated text.
    """
    generated_text: str = Field(..., description="The text generated by the LLM.")
    provider_used: str = Field(..., description="The LLM provider that generated the response.")
    tokens_generated: int | None = Field(None, description="Number of tokens generated (if available).")

class JobParseRequest(BaseModel):
    """
    Request model for parsing a job description from a URL.
    """
    job_url: HttpUrl = Field(..., description="The URL of the job posting to parse.")
    llm_provider: str = Field("gemini", description="The LLM provider to use for parsing (e.g., 'gemini').")

class ParsedJobInfo(BaseModel):
    """
    Response model for parsed job information.
    """
    title: Optional[str] = Field(None, description="The job title.")
    company_name: Optional[str] = Field(None, description="The name of the company.")
    location: Optional[str] = Field(None, description="The job location (e.g., city, state, remote).")
    description: Optional[str] = Field(None, description="A brief summary or key parts of the job description.")
    technical_skills: List[str] = Field([], description="A list of key technical skills.") # <--- CHANGED
    soft_skills: List[str] = Field([], description="A list of key soft skills.")       # <--- NEW FIELD
    years_of_experience: Optional[Union[float, str]] = Field(None, description="Required years of experience (e.g., 2.0, '2-5 years').")
    parsed_by_provider: str = Field(..., description="The LLM provider used for parsing.")
    raw_llm_output: Optional[str] = Field(None, description="Raw output from the LLM (for debugging/verification).")
